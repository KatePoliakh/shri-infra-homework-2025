name: Release Flow

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Release version'

env:
  YC_REGISTRY: ${{ secrets.YC_REGISTRY }}
  VERSION: ${{ github.run_number }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 🔄 Install YC CLI and login to Container Registry
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_REGISTRY: ${{ secrets.YC_REGISTRY }}
        run: |
          echo "🔄 Installing Yandex Cloud CLI..."
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh  | bash

          echo "✅ Add CLI path manually"
          export PATH="$HOME/yandex-cloud/bin:$PATH"

          echo "🔍 Checking yc is installed..."
          yc --version

          echo "🔐 Logging into Yandex Container Registry..."
          echo "$YC_TOKEN" | yc container registry configure-docker $YC_REGISTRY

      - name: 🧪 Run Lint & Tests
        run: |
          echo "🧪 Running lint and tests..."
          npm ci
          npm run lint
          npm run test

      - name: 📝 Get commit range
        id: commits
        run: |
          echo "📄 Getting commit history..."
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          COMMITS=$(git log --pretty=format:"%h %s" ${PREV_TAG}..HEAD)
          echo "commits=$COMMITS" >> $GITHUB_ENV
          echo "📄 Found commits:\n$COMMITS"

      - name: 🌿 Create release branch
        run: |
          VERSION=${{ github.run_number }}
          echo "🌿 Creating release branch releases/$VERSION"
          git checkout -b releases/$VERSION
          git push origin releases/$VERSION

      - name: 🛠️ Build Docker image
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_NAME=$YC_REGISTRY:$VERSION
          LATEST_IMAGE=$YC_REGISTRY:${VERSION}_latest

          echo "🏗️ Building Docker image with tags:"
          echo " - $IMAGE_NAME"
          echo " - $LATEST_IMAGE"

          docker build -t $IMAGE_NAME -t $LATEST_IMAGE .

      - name: 🚀 Push Docker image to Yandex Container Registry
        run: |
          VERSION=${{ github.run_number }}
          IMAGE_NAME=$YC_REGISTRY:$VERSION
          LATEST_IMAGE=$YC_REGISTRY:${VERSION}_latest

          echo "🚚 Pushing image to registry..."
          docker push $IMAGE_NAME
          docker push $LATEST_IMAGE

      - name: 🏷️ Create Git tag
        run: |
          VERSION=${{ github.run_number }}
          echo "🏷️ Creating git tag v$VERSION"
          git tag -a v$VERSION -m "Release v$VERSION (#${{ github.run_number }})"
          git push origin v$VERSION

      - name: 📄 Update CHANGELOG.md
        run: |
          VERSION=${{ github.run_number }}
          echo "📝 Updating CHANGELOG.md"
          echo "# v$VERSION\n\n${{ env.commits }}\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for v$VERSION"
          git push origin main

      - name: 💬 Create Release Issue via GitHub API
        id: create_issue
        run: |
          TITLE="🚢 Release v${{ github.run_number }}"
          BODY="📅 Date: $(date +'%Y-%m-%d')\n🧑 Author: ${{ github.actor }}\n🔢 Version: v${{ github.run_number }}\n\n📜 Commits:\n${{ env.commits }}\n\n📦 Docker Image:\n\`\`\`bash\n$YC_REGISTRY:${{ github.run_number }}\n$YC_REGISTRY:${{ github.run_number }}_latest\n\`\`\`"
          
          echo "📌 Creating GitHub Issue: $TITLE"
          ISSUE_JSON=$(mktemp)
          cat <<EOF > $ISSUE_JSON
          {
            "title": "$TITLE",
            "body": "$BODY",
            "labels": ["release"]
          }
          EOF

          ISSUE_URL="https://api.github.com/repos/ ${{ github.repository }}/issues"
          RESPONSE=$(curl -fsSL --data "@$ISSUE_JSON" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "$ISSUE_URL")

          ISSUE_NUMBER=$(echo "$RESPONSE" | jq -r '.number')

          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: 💥 Comment on Issue if failed
        if: ${{ failure() }}
        run: |
          ISSUE_NUMBER=${{ env.ISSUE_NUMBER }}
          echo "💬 Adding error comment to issue #$ISSUE_NUMBER"
          ERROR_COMMENT="🚨 Release failed during execution.\n\nWorkflow: [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nUser: ${{ github.actor }}\nDate: $(date +'%Y-%m-%d %T')"
          
          COMMENT_JSON=$(mktemp)
          echo "{\"body\": \"$ERROR_COMMENT\"}" > $COMMENT_JSON

          curl -fsSL --request POST \
            --url "https://api.github.com/repos/ ${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments" \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github.v3+json" \
            --data "@$COMMENT_JSON"

      - name: 🎉 Comment on Issue if success
        if: ${{ success() }}
        run: |
          ISSUE_NUMBER=${{ env.ISSUE_NUMBER }}
          echo "💬 Adding success comment to issue #$ISSUE_NUMBER"
          SUCCESS_COMMENT="🎉 Release completed successfully!\n\nWorkflow: [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          COMMENT_JSON=$(mktemp)
          echo "{\"body\": \"$SUCCESS_COMMENT\"}" > $COMMENT_JSON

          curl -fsSL --request POST \
            --url "https://api.github.com/repos/ ${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments" \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github.v3+json" \
            --data "@$COMMENT_JSON"