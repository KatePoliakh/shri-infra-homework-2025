name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: 'Version to deploy (e.g. 1)'

env:
  YC_REGISTRY: ${{ secrets.YC_REGISTRY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: ☁️ Install YC CLI
        run: |
          echo "🔄 Installing Yandex Cloud CLI..."
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh  | bash

          echo "✅ Add CLI path manually"
          export PATH="$HOME/yandex-cloud/bin:$PATH"

          echo "🔍 Checking yc is installed..."
          yc --version

      - name: 🔐 🐳 Login to Yandex Container Registry & Check if image exists in registry
        env:
          IMAGE: ${{ secrets.YC_REGISTRY }}:${{ github.event.inputs.version }}_latest
        run: |
          echo "🔍 Checking for image: $IMAGE"

          docker login cr.yandex -u oauth --password-stdin <<< "${{ secrets.YC_TOKEN }}"

          if ! docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "❌ Image not found in registry"
            exit 1
          else
            echo "✅ Image exists"
          fi

      - name: 🛠️ SSH into server and deploy via SSH command
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_IP }}
          username: epolyakh
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "🐋 Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            fi

             if ! groups $USER | grep -q '\bdocker\b'; then
              echo "👥 Adding user to docker group..."
              sudo usermod -aG docker $USER
              sudo setfacl -m user:$USER:rw /var/run/docker.sock
            fi

            IMAGE="${{ secrets.YC_REGISTRY }}:${{ github.event.inputs.version }}_latest"

            echo "🐋 Pulling image: $IMAGE"
            docker login cr.yandex -u oauth --password-stdin <<< "${{ secrets.YC_TOKEN }}"
            docker pull "$IMAGE"

            echo "🛑 Stopping and removing old container..."
            docker stop app || true && docker rm app || true

            echo "📦 Running new container..."
            docker run -d --name app -p 3000:3000 "$IMAGE"

      - name: 💬 Get Issue Number from Release Tag
        id: get_issue
        run: |
          echo "📌 Fetching release tag info..."
          TAG_MSG=$(git tag -l v${{ inputs.version }} --format='%(contents)')
          ISSUE_NUMBER=$(echo "$TAG_MSG" | grep -o '#[0-9]*' | tr -d '#' || echo "")

          if [ -z "$ISSUE_NUMBER" ]; then
            echo "⚠️ Could not find issue number in tag message."
            echo "ISSUE_NUMBER=" >> $GITHUB_ENV
          else
            echo "📌 Found linked issue #$ISSUE_NUMBER"
            echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          fi

      - name: 💬 Comment on Issue via GitHub API (if issue exists)
        if: env.ISSUE_NUMBER != ''
        run: |
          COMMENT="🚀 **Deployed to production**\nDate: $(date +'%Y-%m-%d')\nBy: ${{ github.actor }}"
          
          echo "💬 Adding comment to issue #$ISSUE_NUMBER"
          curl -fsSL --request POST \
            --url "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.ISSUE_NUMBER }}/comments" \
            --header "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github.v3+json" \
            --data '{"body":"'"$COMMENT"'"}'